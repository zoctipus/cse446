\begin{Verbatim}[commandchars=\\\{\}]
\PYG{c+c1}{\PYGZsh{} When taking sqrt for initialization you might want to use math package,}
\PYG{c+c1}{\PYGZsh{} since torch.sqrt requires a tensor, and math.sqrt is ok with integer}
\PYG{k+kn}{import} \PYG{n+nn}{math}
\PYG{k+kn}{from} \PYG{n+nn}{typing} \PYG{k+kn}{import} \PYG{n}{List}

\PYG{k+kn}{import} \PYG{n+nn}{matplotlib.pyplot} \PYG{k}{as} \PYG{n+nn}{plt}
\PYG{k+kn}{import} \PYG{n+nn}{torch}
\PYG{k+kn}{from} \PYG{n+nn}{torch.distributions} \PYG{k+kn}{import} \PYG{n}{Uniform}
\PYG{k+kn}{from} \PYG{n+nn}{torch.nn} \PYG{k+kn}{import} \PYG{n}{Module}
\PYG{k+kn}{from} \PYG{n+nn}{torch.nn.functional} \PYG{k+kn}{import} \PYG{n}{cross\PYGZus{}entropy}\PYG{p}{,} \PYG{n}{relu}\PYG{p}{,} \PYG{n}{one\PYGZus{}hot}
\PYG{k+kn}{from} \PYG{n+nn}{torch.nn.parameter} \PYG{k+kn}{import} \PYG{n}{Parameter}
\PYG{k+kn}{from} \PYG{n+nn}{torch.optim} \PYG{k+kn}{import} \PYG{n}{Adam}
\PYG{k+kn}{from} \PYG{n+nn}{torch.utils.data} \PYG{k+kn}{import} \PYG{n}{DataLoader}\PYG{p}{,} \PYG{n}{TensorDataset}
\PYG{k+kn}{from} \PYG{n+nn}{torch.profiler} \PYG{k+kn}{import} \PYG{n}{profile}\PYG{p}{,} \PYG{n}{record\PYGZus{}function}


\PYG{k+kn}{from} \PYG{n+nn}{utils} \PYG{k+kn}{import} \PYG{n}{load\PYGZus{}dataset}\PYG{p}{,} \PYG{n}{problem}


\PYG{k}{class} \PYG{n+nc}{F1}\PYG{p}{(}\PYG{n}{Module}\PYG{p}{):}
    \PYG{n+nd}{@problem}\PYG{o}{.}\PYG{n}{tag}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}hw3\PYGZhy{}A\PYGZdq{}}\PYG{p}{,} \PYG{n}{start\PYGZus{}line}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{)}
    \PYG{k}{def} \PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{h}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{,} \PYG{n}{d}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{,} \PYG{n}{k}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{):}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}Create a F1 model as described in pdf.}

\PYG{l+s+sd}{        Args:}
\PYG{l+s+sd}{            h (int): Hidden dimension.}
\PYG{l+s+sd}{            d (int): Input dimension/number of features.}
\PYG{l+s+sd}{            k (int): Output dimension/number of classes.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n+nb}{super}\PYG{p}{()}\PYG{o}{.}\PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{()}
        \PYG{n}{alpha} \PYG{o}{=} \PYG{n}{math}\PYG{o}{.}\PYG{n}{sqrt}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{/}\PYG{n}{d}\PYG{p}{)}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W0} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{d}\PYG{p}{,} \PYG{n}{h}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b0} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{h}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W1} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{h}\PYG{p}{,} \PYG{n}{k}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b1} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{k}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
    \PYG{n+nd}{@problem}\PYG{o}{.}\PYG{n}{tag}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}hw3\PYGZhy{}A\PYGZdq{}}\PYG{p}{)}
    \PYG{k}{def} \PYG{n+nf}{forward}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{x}\PYG{p}{:} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{Tensor}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{Tensor}\PYG{p}{:}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Pass input through F1 model.}

\PYG{l+s+sd}{        It should perform operation:}
\PYG{l+s+sd}{        W\PYGZus{}1(sigma(W\PYGZus{}0*x + b\PYGZus{}0)) + b\PYGZus{}1}

\PYG{l+s+sd}{        Note that in this coding assignment, we use the same convention as previous}
\PYG{l+s+sd}{        assignments where a linear module is of the form xW + b. This differs from the }
\PYG{l+s+sd}{        general forward pass operation defined above, which assumes the form Wx + b.}
\PYG{l+s+sd}{        When implementing the forward pass, make sure that the correct matrices and}
\PYG{l+s+sd}{        transpositions are used.}

\PYG{l+s+sd}{        Args:}
\PYG{l+s+sd}{            x (torch.Tensor): FloatTensor of shape (n, d). Input data.}

\PYG{l+s+sd}{        Returns:}
\PYG{l+s+sd}{            torch.Tensor: FloatTensor of shape (n, k). Prediction.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n}{x} \PYG{o}{=} \PYG{n}{relu}\PYG{p}{(}\PYG{n}{x} \PYG{o}{@} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W0} \PYG{o}{+} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b0}\PYG{p}{)}
        \PYG{n}{x} \PYG{o}{=} \PYG{n}{x} \PYG{o}{@} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W1} \PYG{o}{+} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b1}
        \PYG{k}{return} \PYG{n}{x}


\PYG{k}{class} \PYG{n+nc}{F2}\PYG{p}{(}\PYG{n}{Module}\PYG{p}{):}
    \PYG{n+nd}{@problem}\PYG{o}{.}\PYG{n}{tag}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}hw3\PYGZhy{}A\PYGZdq{}}\PYG{p}{,} \PYG{n}{start\PYGZus{}line}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{)}
    \PYG{k}{def} \PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{h0}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{,} \PYG{n}{h1}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{,} \PYG{n}{d}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{,} \PYG{n}{k}\PYG{p}{:} \PYG{n+nb}{int}\PYG{p}{):}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}Create a F2 model as described in pdf.}

\PYG{l+s+sd}{        Args:}
\PYG{l+s+sd}{            h0 (int): First hidden dimension (between first and second layer).}
\PYG{l+s+sd}{            h1 (int): Second hidden dimension (between second and third layer).}
\PYG{l+s+sd}{            d (int): Input dimension/number of features.}
\PYG{l+s+sd}{            k (int): Output dimension/number of classes.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n+nb}{super}\PYG{p}{()}\PYG{o}{.}\PYG{n+nf+fm}{\PYGZus{}\PYGZus{}init\PYGZus{}\PYGZus{}}\PYG{p}{()}
        \PYG{n}{alpha} \PYG{o}{=} \PYG{n}{math}\PYG{o}{.}\PYG{n}{sqrt}\PYG{p}{(}\PYG{l+m+mi}{1}\PYG{o}{/}\PYG{n}{d}\PYG{p}{)}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W0} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{d}\PYG{p}{,} \PYG{n}{h0}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b0} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{h0}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W1} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{h0}\PYG{p}{,} \PYG{n}{h1}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b1} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{h1}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W2} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{h1}\PYG{p}{,} \PYG{n}{k}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}
        \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b2} \PYG{o}{=} \PYG{n}{Parameter}\PYG{p}{(}\PYG{n}{torch}\PYG{o}{.}\PYG{n}{empty}\PYG{p}{(}\PYG{n}{k}\PYG{p}{)}\PYG{o}{.}\PYG{n}{uniform\PYGZus{}}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{n}{alpha}\PYG{p}{,} \PYG{n}{alpha}\PYG{p}{))}

    \PYG{n+nd}{@problem}\PYG{o}{.}\PYG{n}{tag}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}hw3\PYGZhy{}A\PYGZdq{}}\PYG{p}{)}
    \PYG{k}{def} \PYG{n+nf}{forward}\PYG{p}{(}\PYG{n+nb+bp}{self}\PYG{p}{,} \PYG{n}{x}\PYG{p}{:} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{Tensor}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{Tensor}\PYG{p}{:}
\PYG{+w}{        }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{        Pass input through F2 model.}

\PYG{l+s+sd}{        It should perform operation:}
\PYG{l+s+sd}{        W\PYGZus{}2(sigma(W\PYGZus{}1(sigma(W\PYGZus{}0*x + b\PYGZus{}0)) + b\PYGZus{}1) + b\PYGZus{}2)}

\PYG{l+s+sd}{        Note that in this coding assignment, we use the same convention as previous}
\PYG{l+s+sd}{        assignments where a linear module is of the form xW + b. This differs from the }
\PYG{l+s+sd}{        general forward pass operation defined above, which assumes the form Wx + b.}
\PYG{l+s+sd}{        When implementing the forward pass, make sure that the correct matrices and}
\PYG{l+s+sd}{        transpositions are used.}

\PYG{l+s+sd}{        Args:}
\PYG{l+s+sd}{            x (torch.Tensor): FloatTensor of shape (n, d). Input data.}

\PYG{l+s+sd}{        Returns:}
\PYG{l+s+sd}{            torch.Tensor: FloatTensor of shape (n, k). Prediction.}
\PYG{l+s+sd}{        \PYGZdq{}\PYGZdq{}\PYGZdq{}}
        \PYG{n}{x} \PYG{o}{=} \PYG{n}{relu}\PYG{p}{(}\PYG{n}{x} \PYG{o}{@} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W0} \PYG{o}{+} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b0}\PYG{p}{)}
        \PYG{n}{x} \PYG{o}{=} \PYG{n}{relu}\PYG{p}{(}\PYG{n}{x} \PYG{o}{@} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W1} \PYG{o}{+} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b1}\PYG{p}{)}
        \PYG{k}{return} \PYG{n}{x} \PYG{o}{@} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{W2} \PYG{o}{+} \PYG{n+nb+bp}{self}\PYG{o}{.}\PYG{n}{b2}

\PYG{k}{def} \PYG{n+nf}{accuracy\PYGZus{}score}\PYG{p}{(}\PYG{n}{model}\PYG{p}{:}\PYG{n}{Module}\PYG{p}{,} \PYG{n}{dataloader}\PYG{p}{,} \PYG{n}{device}\PYG{p}{:} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{device}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n+nb}{float}\PYG{p}{:}
\PYG{+w}{    }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}Calculates accuracy of model on dataloader. Returns it as a fraction.}

\PYG{l+s+sd}{    Args:}
\PYG{l+s+sd}{        model (nn.Module): Model to evaluate.}
\PYG{l+s+sd}{        dataloader (DataLoader): Dataloader for CrossEntropy.}
\PYG{l+s+sd}{            Each example is a tuple consiting of (observation, target).}
\PYG{l+s+sd}{            Observation is a 2\PYGZhy{}d vector of floats.}
\PYG{l+s+sd}{            Target is an integer representing a correct class to a corresponding observation.}

\PYG{l+s+sd}{    Returns:}
\PYG{l+s+sd}{        float: Vanilla python float resprenting accuracy of the model on given dataset/dataloader.}
\PYG{l+s+sd}{            In range [0, 1].}

\PYG{l+s+sd}{    Note:}
\PYG{l+s+sd}{        \PYGZhy{} For a single\PYGZhy{}element tensor you can use .item() to cast it to a float.}
\PYG{l+s+sd}{        \PYGZhy{} This is similar to MSE accuracy\PYGZus{}score function,}
\PYG{l+s+sd}{            but there will be differences due to slightly different targets in dataloaders.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{n}{model}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{)}
    \PYG{n}{model}\PYG{o}{.}\PYG{n}{eval}\PYG{p}{()}
    \PYG{n}{correct} \PYG{o}{=} \PYG{l+m+mi}{0}
    \PYG{n}{total} \PYG{o}{=} \PYG{l+m+mi}{0}
    \PYG{k}{with} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{no\PYGZus{}grad}\PYG{p}{():}
        \PYG{k}{for} \PYG{n}{observation}\PYG{p}{,} \PYG{n}{target} \PYG{o+ow}{in} \PYG{n}{dataloader}\PYG{p}{:}
            \PYG{n}{observation}\PYG{p}{,} \PYG{n}{target} \PYG{o}{=} \PYG{n}{observation}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{),} \PYG{n}{target}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{)}
            \PYG{n}{\PYGZus{}predict} \PYG{o}{=} \PYG{n}{model}\PYG{p}{(}\PYG{n}{observation}\PYG{p}{)}
            \PYG{n}{\PYGZus{}}\PYG{p}{,} \PYG{n}{predict\PYGZus{}} \PYG{o}{=} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{max}\PYG{p}{(}\PYG{n}{\PYGZus{}predict}\PYG{o}{.}\PYG{n}{data}\PYG{p}{,} \PYG{l+m+mi}{1}\PYG{p}{)}
            \PYG{n}{total} \PYG{o}{+=} \PYG{n}{target}\PYG{o}{.}\PYG{n}{size}\PYG{p}{(}\PYG{l+m+mi}{0}\PYG{p}{)}
            \PYG{n}{correct} \PYG{o}{+=} \PYG{p}{(}\PYG{n}{predict\PYGZus{}} \PYG{o}{==} \PYG{n}{target}\PYG{p}{)}\PYG{o}{.}\PYG{n}{sum}\PYG{p}{()}\PYG{o}{.}\PYG{n}{item}\PYG{p}{()}
    \PYG{n}{accuracy} \PYG{o}{=} \PYG{n}{correct} \PYG{o}{/} \PYG{n}{total}
    \PYG{k}{return} \PYG{n}{accuracy}


\PYG{n+nd}{@problem}\PYG{o}{.}\PYG{n}{tag}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}hw3\PYGZhy{}A\PYGZdq{}}\PYG{p}{)}
\PYG{k}{def} \PYG{n+nf}{train}\PYG{p}{(}\PYG{n}{model}\PYG{p}{:} \PYG{n}{Module}\PYG{p}{,} \PYG{n}{optimizer}\PYG{p}{:} \PYG{n}{Adam}\PYG{p}{,} \PYG{n}{train\PYGZus{}loader}\PYG{p}{:} \PYG{n}{DataLoader}\PYG{p}{,} \PYG{n}{device}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n}{List}\PYG{p}{[}\PYG{n+nb}{float}\PYG{p}{]:}
\PYG{+w}{    }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Train a model until it reaches 99\PYGZpc{} accuracy on train set, and return list of training crossentropy losses for each epochs.}

\PYG{l+s+sd}{    Args:}
\PYG{l+s+sd}{        model (Module): Model to train. Either F1, or F2 in this problem.}
\PYG{l+s+sd}{        optimizer (Adam): Optimizer that will adjust parameters of the model.}
\PYG{l+s+sd}{        train\PYGZus{}loader (DataLoader): DataLoader with training data.}
\PYG{l+s+sd}{            You can iterate over it like a list, and it will produce tuples (x, y),}
\PYG{l+s+sd}{            where x is FloatTensor of shape (n, d) and y is LongTensor of shape (n,).}
\PYG{l+s+sd}{            Note that y contains the classes as integers.}

\PYG{l+s+sd}{    Returns:}
\PYG{l+s+sd}{        List[float]: List containing average loss for each epoch.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{n}{model}\PYG{o}{.}\PYG{n}{train}\PYG{p}{()}
    \PYG{n}{history} \PYG{o}{=} \PYG{p}{[]}
    \PYG{n}{total\PYGZus{}loss} \PYG{o}{=} \PYG{l+m+mi}{0}
    \PYG{n}{epoch} \PYG{o}{=} \PYG{l+m+mi}{0}
    \PYG{n}{accuracy} \PYG{o}{=} \PYG{l+m+mi}{0}
    \PYG{n}{model}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{)}
    \PYG{k}{while}  \PYG{n}{accuracy}\PYG{o}{\PYGZlt{}} \PYG{l+m+mf}{0.99}\PYG{p}{:}
        \PYG{n}{epoch} \PYG{o}{+=} \PYG{l+m+mi}{1}
        \PYG{n}{total\PYGZus{}loss} \PYG{o}{=} \PYG{l+m+mi}{0}
        \PYG{k}{for} \PYG{n}{\PYGZus{}x}\PYG{p}{,} \PYG{n}{\PYGZus{}y} \PYG{o+ow}{in} \PYG{n}{train\PYGZus{}loader}\PYG{p}{:}
            \PYG{n}{\PYGZus{}x}\PYG{p}{,} \PYG{n}{\PYGZus{}y} \PYG{o}{=} \PYG{n}{\PYGZus{}x}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{),} \PYG{n}{\PYGZus{}y}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{)}
            \PYG{n}{optimizer}\PYG{o}{.}\PYG{n}{zero\PYGZus{}grad}\PYG{p}{()}
            \PYG{n}{y\PYGZus{}pred} \PYG{o}{=} \PYG{n}{model}\PYG{p}{(}\PYG{n}{\PYGZus{}x}\PYG{p}{)}
            \PYG{n}{loss} \PYG{o}{=} \PYG{n}{cross\PYGZus{}entropy}\PYG{p}{(}\PYG{n}{y\PYGZus{}pred}\PYG{p}{,} \PYG{n}{\PYGZus{}y}\PYG{p}{)}
            \PYG{n}{loss}\PYG{o}{.}\PYG{n}{backward}\PYG{p}{()}
            \PYG{n}{optimizer}\PYG{o}{.}\PYG{n}{step}\PYG{p}{()}
            \PYG{n}{total\PYGZus{}loss} \PYG{o}{+=} \PYG{n}{loss}\PYG{o}{.}\PYG{n}{item}\PYG{p}{()}
        \PYG{n}{avg\PYGZus{}train\PYGZus{}loss} \PYG{o}{=} \PYG{n}{total\PYGZus{}loss} \PYG{o}{/} \PYG{n+nb}{len}\PYG{p}{(}\PYG{n}{train\PYGZus{}loader}\PYG{p}{)}
        \PYG{n}{history}\PYG{o}{.}\PYG{n}{append}\PYG{p}{(}\PYG{n}{avg\PYGZus{}train\PYGZus{}loss}\PYG{p}{)}
        \PYG{n}{accuracy} \PYG{o}{=} \PYG{n}{accuracy\PYGZus{}score}\PYG{p}{(}\PYG{n}{model}\PYG{p}{,} \PYG{n}{train\PYGZus{}loader}\PYG{p}{,} \PYG{n}{device}\PYG{p}{)}
        \PYG{n+nb}{print}\PYG{p}{(}\PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}epoch:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{epoch}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{ train\PYGZus{}loss:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{avg\PYGZus{}train\PYGZus{}loss}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{ accuracy:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{accuracy}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{)}
    \PYG{k}{return} \PYG{n}{history}

\PYG{k}{def} \PYG{n+nf}{eval\PYGZus{}test\PYGZus{}loss}\PYG{p}{(}\PYG{n}{model}\PYG{p}{:}\PYG{n}{Module}\PYG{p}{,} \PYG{n}{test\PYGZus{}loader}\PYG{p}{,} \PYG{n}{device}\PYG{p}{):}
    \PYG{n}{total\PYGZus{}val\PYGZus{}loss} \PYG{o}{=} \PYG{l+m+mi}{0}
    \PYG{n}{model}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{)}
    \PYG{k}{with} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{no\PYGZus{}grad}\PYG{p}{():}
        \PYG{k}{for} \PYG{n}{\PYGZus{}x}\PYG{p}{,} \PYG{n}{\PYGZus{}y} \PYG{o+ow}{in} \PYG{n}{test\PYGZus{}loader}\PYG{p}{:}
            \PYG{n}{\PYGZus{}x}\PYG{p}{,} \PYG{n}{\PYGZus{}y} \PYG{o}{=} \PYG{n}{\PYGZus{}x}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{),} \PYG{n}{\PYGZus{}y}\PYG{o}{.}\PYG{n}{to}\PYG{p}{(}\PYG{n}{device}\PYG{p}{)}
            \PYG{n}{y\PYGZus{}pred} \PYG{o}{=} \PYG{n}{model}\PYG{p}{(}\PYG{n}{\PYGZus{}x}\PYG{p}{)}
            \PYG{n}{loss} \PYG{o}{=} \PYG{n}{cross\PYGZus{}entropy}\PYG{p}{(}\PYG{n}{y\PYGZus{}pred}\PYG{p}{,} \PYG{n}{\PYGZus{}y}\PYG{p}{)}
            \PYG{n}{total\PYGZus{}val\PYGZus{}loss} \PYG{o}{+=} \PYG{n}{loss}\PYG{o}{.}\PYG{n}{item}\PYG{p}{()}
    \PYG{n}{ave\PYGZus{}val\PYGZus{}loss} \PYG{o}{=} \PYG{n}{total\PYGZus{}val\PYGZus{}loss} \PYG{o}{/} \PYG{n+nb}{len}\PYG{p}{(}\PYG{n}{test\PYGZus{}loader}\PYG{p}{)}
    \PYG{k}{return} \PYG{n}{ave\PYGZus{}val\PYGZus{}loss}

\PYG{k}{def} \PYG{n+nf}{plot\PYGZus{}and\PYGZus{}save\PYGZus{}graphs}\PYG{p}{(}\PYG{n}{results}\PYG{p}{,} \PYG{n}{filename\PYGZus{}prefix}\PYG{p}{):}
    \PYG{n}{lr\PYGZus{}batch\PYGZus{}combinations} \PYG{o}{=} \PYG{n+nb}{set}\PYG{p}{((}\PYG{n}{value}\PYG{p}{[}\PYG{l+s+s1}{\PYGZsq{}lr\PYGZsq{}}\PYG{p}{],} \PYG{n}{value}\PYG{p}{[}\PYG{l+s+s1}{\PYGZsq{}batch\PYGZus{}size\PYGZsq{}}\PYG{p}{])} \PYG{k}{for} \PYG{n}{value} \PYG{o+ow}{in} \PYG{n}{results}\PYG{o}{.}\PYG{n}{values}\PYG{p}{())}
    \PYG{n}{unique\PYGZus{}batch\PYGZus{}sizes} \PYG{o}{=} \PYG{n+nb}{set}\PYG{p}{(}\PYG{n}{batch\PYGZus{}size} \PYG{k}{for} \PYG{n}{\PYGZus{}}\PYG{p}{,} \PYG{n}{batch\PYGZus{}size} \PYG{o+ow}{in} \PYG{n}{lr\PYGZus{}batch\PYGZus{}combinations}\PYG{p}{)}
    \PYG{n}{unique\PYGZus{}lrs} \PYG{o}{=} \PYG{n+nb}{set}\PYG{p}{(}\PYG{n}{lr} \PYG{k}{for} \PYG{n}{lr}\PYG{p}{,} \PYG{n}{\PYGZus{}} \PYG{o+ow}{in} \PYG{n}{lr\PYGZus{}batch\PYGZus{}combinations}\PYG{p}{)}

    \PYG{c+c1}{\PYGZsh{} For each batch size, plot a figure with subplots for each learning rate}
    \PYG{k}{for} \PYG{n}{batch\PYGZus{}size} \PYG{o+ow}{in} \PYG{n}{unique\PYGZus{}batch\PYGZus{}sizes}\PYG{p}{:}
        \PYG{n}{plt}\PYG{o}{.}\PYG{n}{figure}\PYG{p}{(}\PYG{n}{figsize}\PYG{o}{=}\PYG{p}{(}\PYG{l+m+mi}{15}\PYG{p}{,} \PYG{l+m+mi}{6} \PYG{o}{*} \PYG{n+nb}{len}\PYG{p}{(}\PYG{n}{unique\PYGZus{}lrs}\PYG{p}{)))}  \PYG{c+c1}{\PYGZsh{} Adjust the figure size as needed}

        \PYG{k}{for} \PYG{n}{i}\PYG{p}{,} \PYG{n}{lr} \PYG{o+ow}{in} \PYG{n+nb}{enumerate}\PYG{p}{(}\PYG{n}{unique\PYGZus{}lrs}\PYG{p}{,} \PYG{n}{start}\PYG{o}{=}\PYG{l+m+mi}{1}\PYG{p}{):}
            \PYG{n}{plt}\PYG{o}{.}\PYG{n}{subplot}\PYG{p}{(}\PYG{n+nb}{len}\PYG{p}{(}\PYG{n}{unique\PYGZus{}lrs}\PYG{p}{),} \PYG{l+m+mi}{1}\PYG{p}{,} \PYG{n}{i}\PYG{p}{)}  \PYG{c+c1}{\PYGZsh{} Create a subplot for each learning rate}

            \PYG{c+c1}{\PYGZsh{} Filter and plot models with the current lr and batch\PYGZus{}size combination}
            \PYG{k}{for} \PYG{n}{model\PYGZus{}name} \PYG{o+ow}{in} \PYG{n}{results}\PYG{p}{:}
                \PYG{k}{if} \PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}\PYGZus{}lr}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{lr}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZus{}batch}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{batch\PYGZus{}size}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}} \PYG{o+ow}{in} \PYG{n}{model\PYGZus{}name}\PYG{p}{:}
                    \PYG{n}{plt}\PYG{o}{.}\PYG{n}{plot}\PYG{p}{(}\PYG{n}{results}\PYG{p}{[}\PYG{n}{model\PYGZus{}name}\PYG{p}{][}\PYG{l+s+s1}{\PYGZsq{}train\PYGZsq{}}\PYG{p}{],} \PYG{n}{label}\PYG{o}{=}\PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{model\PYGZus{}name}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{ \PYGZhy{} Train\PYGZdq{}}\PYG{p}{)}

            \PYG{n}{plt}\PYG{o}{.}\PYG{n}{xlabel}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}Epochs\PYGZsq{}}\PYG{p}{)}
            \PYG{n}{plt}\PYG{o}{.}\PYG{n}{ylabel}\PYG{p}{(}\PYG{l+s+s1}{\PYGZsq{}Loss\PYGZsq{}}\PYG{p}{)}
            \PYG{n}{plt}\PYG{o}{.}\PYG{n}{title}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}training loss vs epoch\PYGZdq{}}\PYG{p}{)}
            \PYG{n}{plt}\PYG{o}{.}\PYG{n}{legend}\PYG{p}{()}

        \PYG{n}{plt}\PYG{o}{.}\PYG{n}{tight\PYGZus{}layout}\PYG{p}{()}
        \PYG{n}{plt}\PYG{o}{.}\PYG{n}{savefig}\PYG{p}{(}\PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}hw3\PYGZus{}written/}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{filename\PYGZus{}prefix}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZus{}batch}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{batch\PYGZus{}size}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{.png\PYGZdq{}}\PYG{p}{)}
        \PYG{n}{plt}\PYG{o}{.}\PYG{n}{close}\PYG{p}{()}  \PYG{c+c1}{\PYGZsh{} Close the figure to free memory}

\PYG{k}{def} \PYG{n+nf}{count\PYGZus{}parameters}\PYG{p}{(}\PYG{n}{model}\PYG{p}{:} \PYG{n}{Module}\PYG{p}{)} \PYG{o}{\PYGZhy{}\PYGZgt{}} \PYG{n+nb}{int}\PYG{p}{:}
    \PYG{k}{return} \PYG{n+nb}{sum}\PYG{p}{(}\PYG{n}{p}\PYG{o}{.}\PYG{n}{numel}\PYG{p}{()} \PYG{k}{for} \PYG{n}{p} \PYG{o+ow}{in} \PYG{n}{model}\PYG{o}{.}\PYG{n}{parameters}\PYG{p}{()} \PYG{k}{if} \PYG{n}{p}\PYG{o}{.}\PYG{n}{requires\PYGZus{}grad}\PYG{p}{)}

\PYG{n+nd}{@problem}\PYG{o}{.}\PYG{n}{tag}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}hw3\PYGZhy{}A\PYGZdq{}}\PYG{p}{,} \PYG{n}{start\PYGZus{}line}\PYG{o}{=}\PYG{l+m+mi}{5}\PYG{p}{)}
\PYG{k}{def} \PYG{n+nf}{main}\PYG{p}{():}
\PYG{+w}{    }\PYG{l+s+sd}{\PYGZdq{}\PYGZdq{}\PYGZdq{}}
\PYG{l+s+sd}{    Main function of this problem.}
\PYG{l+s+sd}{    For both F1 and F2 models it should:}
\PYG{l+s+sd}{        1. Train a model}
\PYG{l+s+sd}{        2. Plot per epoch losses}
\PYG{l+s+sd}{        3. Report accuracy and loss on test set}
\PYG{l+s+sd}{        4. Report total number of parameters for each network}

\PYG{l+s+sd}{    Note that we provided you with code that loads MNIST and changes x\PYGZsq{}s and y\PYGZsq{}s to correct type of tensors.}
\PYG{l+s+sd}{    We strongly advise that you use torch functionality such as datasets, but as mentioned in the pdf you cannot use anything from torch.nn other than what is imported here.}
\PYG{l+s+sd}{    \PYGZdq{}\PYGZdq{}\PYGZdq{}}
    \PYG{n}{device} \PYG{o}{=} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{device}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}cuda\PYGZdq{}} \PYG{k}{if} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{cuda}\PYG{o}{.}\PYG{n}{is\PYGZus{}available}\PYG{p}{()} \PYG{k}{else} \PYG{l+s+s2}{\PYGZdq{}cpu\PYGZdq{}}\PYG{p}{)}
    \PYG{n+nb}{print}\PYG{p}{(}\PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}Using device: }\PYG{l+s+si}{\PYGZob{}}\PYG{n}{device}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{)}
    \PYG{p}{(}\PYG{n}{x}\PYG{p}{,} \PYG{n}{y}\PYG{p}{),} \PYG{p}{(}\PYG{n}{x\PYGZus{}test}\PYG{p}{,} \PYG{n}{y\PYGZus{}test}\PYG{p}{)} \PYG{o}{=} \PYG{n}{load\PYGZus{}dataset}\PYG{p}{(}\PYG{l+s+s2}{\PYGZdq{}mnist\PYGZdq{}}\PYG{p}{)}
    \PYG{n}{x} \PYG{o}{=} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{from\PYGZus{}numpy}\PYG{p}{(}\PYG{n}{x}\PYG{p}{)}\PYG{o}{.}\PYG{n}{float}\PYG{p}{()}
    \PYG{n}{y} \PYG{o}{=} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{from\PYGZus{}numpy}\PYG{p}{(}\PYG{n}{y}\PYG{p}{)}\PYG{o}{.}\PYG{n}{long}\PYG{p}{()}
    \PYG{n}{x\PYGZus{}test} \PYG{o}{=} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{from\PYGZus{}numpy}\PYG{p}{(}\PYG{n}{x\PYGZus{}test}\PYG{p}{)}\PYG{o}{.}\PYG{n}{float}\PYG{p}{()}
    \PYG{n}{y\PYGZus{}test} \PYG{o}{=} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{from\PYGZus{}numpy}\PYG{p}{(}\PYG{n}{y\PYGZus{}test}\PYG{p}{)}\PYG{o}{.}\PYG{n}{long}\PYG{p}{()}
    \PYG{n}{train\PYGZus{}dataset} \PYG{o}{=} \PYG{n}{TensorDataset}\PYG{p}{(}\PYG{n}{x}\PYG{p}{,} \PYG{n}{y}\PYG{p}{)}
    \PYG{n}{test\PYGZus{}dataset} \PYG{o}{=} \PYG{n}{TensorDataset}\PYG{p}{(}\PYG{n}{x\PYGZus{}test}\PYG{p}{,} \PYG{n}{y\PYGZus{}test}\PYG{p}{)}
    \PYG{n}{feature} \PYG{o}{=} \PYG{l+m+mi}{28} \PYG{o}{*} \PYG{l+m+mi}{28}
    \PYG{k+kn}{import} \PYG{n+nn}{itertools}
    
    \PYG{n}{result} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{}}
    \PYG{n}{lr}\PYG{o}{=} \PYG{l+m+mi}{10} \PYG{o}{**} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{linspace}\PYG{p}{(}\PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{3}\PYG{p}{,} \PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{3}\PYG{p}{,} \PYG{l+m+mi}{1}\PYG{p}{)}
    \PYG{n}{batch\PYGZus{}sizes} \PYG{o}{=} \PYG{l+m+mi}{2} \PYG{o}{**} \PYG{n}{torch}\PYG{o}{.}\PYG{n}{linspace}\PYG{p}{(}\PYG{l+m+mi}{8}\PYG{p}{,} \PYG{l+m+mi}{9}\PYG{p}{,} \PYG{l+m+mi}{1}\PYG{p}{)}
    \PYG{n}{models} \PYG{o}{=} \PYG{p}{\PYGZob{}}
        \PYG{c+c1}{\PYGZsh{} \PYGZdq{}F1\PYGZdq{}: F1(h=64, d=feature, k=10),}
        \PYG{l+s+s2}{\PYGZdq{}F2\PYGZdq{}}\PYG{p}{:} \PYG{n}{F2}\PYG{p}{(}\PYG{n}{h0}\PYG{o}{=}\PYG{l+m+mi}{32}\PYG{p}{,} \PYG{n}{h1}\PYG{o}{=}\PYG{l+m+mi}{32}\PYG{p}{,} \PYG{n}{d}\PYG{o}{=}\PYG{n}{feature}\PYG{p}{,} \PYG{n}{k}\PYG{o}{=}\PYG{l+m+mi}{10}\PYG{p}{)}
    \PYG{p}{\PYGZcb{}}
    \PYG{n}{combos} \PYG{o}{=} \PYG{n+nb}{list}\PYG{p}{(}\PYG{n}{itertools}\PYG{o}{.}\PYG{n}{product}\PYG{p}{(}\PYG{n}{lr}\PYG{p}{,} \PYG{n}{batch\PYGZus{}sizes}\PYG{p}{,} \PYG{n}{models}\PYG{o}{.}\PYG{n}{items}\PYG{p}{()))}
    \PYG{n}{count} \PYG{o}{=} \PYG{l+m+mi}{0}
    \PYG{k}{for} \PYG{n}{lr}\PYG{p}{,} \PYG{n}{batch\PYGZus{}size}\PYG{p}{,} \PYG{p}{[}\PYG{n}{model\PYGZus{}name}\PYG{p}{,} \PYG{n}{model}\PYG{p}{]} \PYG{o+ow}{in} \PYG{n}{combos}\PYG{p}{:}
        \PYG{n}{train\PYGZus{}loader} \PYG{o}{=} \PYG{n}{DataLoader}\PYG{p}{(}\PYG{n}{train\PYGZus{}dataset}\PYG{p}{,} \PYG{n}{batch\PYGZus{}size}\PYG{o}{=}\PYG{n+nb}{int}\PYG{p}{(}\PYG{n}{batch\PYGZus{}size}\PYG{p}{),} \PYG{n}{shuffle}\PYG{o}{=}\PYG{k+kc}{True}\PYG{p}{,} \PYG{n}{num\PYGZus{}workers}\PYG{o}{=}\PYG{l+m+mi}{12}\PYG{p}{)}
        \PYG{n}{test\PYGZus{}loader} \PYG{o}{=} \PYG{n}{DataLoader}\PYG{p}{(}\PYG{n}{test\PYGZus{}dataset}\PYG{p}{,} \PYG{n}{batch\PYGZus{}size}\PYG{o}{=}\PYG{n+nb}{int}\PYG{p}{(}\PYG{n}{batch\PYGZus{}size}\PYG{p}{),} \PYG{n}{shuffle}\PYG{o}{=}\PYG{k+kc}{False}\PYG{p}{)}
        \PYG{n}{history} \PYG{o}{=} \PYG{n}{train}\PYG{p}{(}\PYG{n}{model}\PYG{o}{=}\PYG{n}{model}\PYG{p}{,} \PYG{n}{optimizer}\PYG{o}{=}\PYG{n}{Adam}\PYG{p}{(}\PYG{n}{params}\PYG{o}{=}\PYG{n}{model}\PYG{o}{.}\PYG{n}{parameters}\PYG{p}{(),} \PYG{n}{lr}\PYG{o}{=}\PYG{n}{lr}\PYG{p}{),} \PYG{n}{train\PYGZus{}loader}\PYG{o}{=}\PYG{n}{train\PYGZus{}loader}\PYG{p}{,} \PYG{n}{device}\PYG{o}{=}\PYG{n}{device}\PYG{p}{)}
        \PYG{n}{test\PYGZus{}loss} \PYG{o}{=} \PYG{n}{eval\PYGZus{}test\PYGZus{}loss}\PYG{p}{(}\PYG{n}{model}\PYG{o}{=}\PYG{n}{model}\PYG{p}{,} \PYG{n}{test\PYGZus{}loader}\PYG{o}{=}\PYG{n}{test\PYGZus{}loader}\PYG{p}{,}\PYG{n}{device}\PYG{o}{=}\PYG{n}{device}\PYG{p}{)}
        \PYG{n}{accuracy} \PYG{o}{=} \PYG{n}{accuracy\PYGZus{}score}\PYG{p}{(}\PYG{n}{model}\PYG{p}{,} \PYG{n}{test\PYGZus{}loader}\PYG{p}{,}\PYG{n}{device}\PYG{o}{=}\PYG{n}{device}\PYG{p}{)}
        \PYG{n}{model\PYGZus{}name\PYGZus{}} \PYG{o}{=} \PYG{l+s+sa}{f}\PYG{l+s+s1}{\PYGZsq{}}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{model\PYGZus{}name}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s1}{\PYGZus{}lr}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{lr}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s1}{\PYGZus{}batch}\PYG{l+s+si}{\PYGZob{}}\PYG{n+nb}{int}\PYG{p}{(}\PYG{n}{batch\PYGZus{}size}\PYG{p}{)}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s1}{\PYGZsq{}}
        \PYG{n+nb}{print}\PYG{p}{(}\PYG{l+s+sa}{f}\PYG{l+s+s2}{\PYGZdq{}}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{count}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{: }\PYG{l+s+si}{\PYGZob{}}\PYG{n}{model\PYGZus{}name\PYGZus{}}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{ accuracy:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{accuracy}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{ train loss:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{history}\PYG{p}{[}\PYG{o}{\PYGZhy{}}\PYG{l+m+mi}{1}\PYG{p}{]}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{ test\PYGZus{}loss:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{test\PYGZus{}loss}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{ param\PYGZus{}size:}\PYG{l+s+si}{\PYGZob{}}\PYG{n}{count\PYGZus{}parameters}\PYG{p}{(}\PYG{n}{model}\PYG{p}{)}\PYG{l+s+si}{\PYGZcb{}}\PYG{l+s+s2}{\PYGZdq{}}\PYG{p}{)}
        \PYG{n}{count} \PYG{o}{+=}\PYG{l+m+mi}{1}
        \PYG{n}{result}\PYG{p}{[}\PYG{n}{model\PYGZus{}name\PYGZus{}}\PYG{p}{]} \PYG{o}{=} \PYG{p}{\PYGZob{}\PYGZcb{}}
        \PYG{n}{result}\PYG{p}{[}\PYG{n}{model\PYGZus{}name\PYGZus{}}\PYG{p}{][}\PYG{l+s+s1}{\PYGZsq{}train\PYGZsq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n}{history}
        \PYG{n}{result}\PYG{p}{[}\PYG{n}{model\PYGZus{}name\PYGZus{}}\PYG{p}{][}\PYG{l+s+s1}{\PYGZsq{}val\PYGZus{}loss\PYGZsq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n}{test\PYGZus{}loss}
        \PYG{n}{result}\PYG{p}{[}\PYG{n}{model\PYGZus{}name\PYGZus{}}\PYG{p}{][}\PYG{l+s+s2}{\PYGZdq{}model\PYGZdq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n}{model}
        \PYG{n}{result}\PYG{p}{[}\PYG{n}{model\PYGZus{}name\PYGZus{}}\PYG{p}{][}\PYG{l+s+s2}{\PYGZdq{}accuracy\PYGZdq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n}{accuracy}
        \PYG{n}{result}\PYG{p}{[}\PYG{n}{model\PYGZus{}name\PYGZus{}}\PYG{p}{][}\PYG{l+s+s1}{\PYGZsq{}lr\PYGZsq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n}{lr}
        \PYG{n}{result}\PYG{p}{[}\PYG{n}{model\PYGZus{}name\PYGZus{}}\PYG{p}{][}\PYG{l+s+s1}{\PYGZsq{}batch\PYGZus{}size\PYGZsq{}}\PYG{p}{]} \PYG{o}{=} \PYG{n+nb}{int}\PYG{p}{(}\PYG{n}{batch\PYGZus{}size}\PYG{p}{)}
    
        \PYG{n}{plot\PYGZus{}and\PYGZus{}save\PYGZus{}graphs}\PYG{p}{(}\PYG{n}{result}\PYG{p}{,} \PYG{n}{model\PYGZus{}name}\PYG{p}{)}

\PYG{k}{if} \PYG{n+nv+vm}{\PYGZus{}\PYGZus{}name\PYGZus{}\PYGZus{}} \PYG{o}{==} \PYG{l+s+s2}{\PYGZdq{}\PYGZus{}\PYGZus{}main\PYGZus{}\PYGZus{}\PYGZdq{}}\PYG{p}{:}
    \PYG{n}{main}\PYG{p}{()}
\end{Verbatim}
